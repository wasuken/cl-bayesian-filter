#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:cl-bayesian-filter :cl-json :mylib) :silent t)
  )

(defpackage :ros.script.run.3809310558
  (:use :cl))
(in-package :ros.script.run.3809310558)

(defun main (&rest argv)
  (declare (ignorable argv))
  (handler-case
	  ;; todo: calling (main ham-path spam-path filepath)y
	  (let ((help-msg (format nil
							  "~{~A~%~}"
							  '("cmds:"
								"	learn        : <type> <tbl-path> [filepath-lst...]"
								"	classify        : <tbl-path> <filepath>"
								"	multi-classify  : <tbl-path> [filepath-lst...]"))))
		(cond ((string= (car argv) "learn")
			   (cl-bayesian-filter:learning (nth 1 argv) ;type
											(nth 2 argv) ;tbl-path
											(nthcdr 3 argv) ;filepath-lst
											)
			   (print "learned!"))
			  ((string= (car argv) "classify")
			   (print (cl-bayesian-filter:classify
					   (nth 1 argv) ;tbl-path
					   (nth 2 argv) ;filepath
					   )))
			  ((string= (car argv) "multi-classify")
			   (let ((size (length (nthcdr 1 argv)))
					 (cnt 1))
				 (loop for rst in (cl-bayesian-filter:multi-classify
								   (nth 1 argv)	;tbl-path
								   (nthcdr 2 argv) ;filepath-lst
								   )
					  for fp in (nthcdr 1 argv)
					do (progn
						 (format t
							   "[ ~A/~A ] filepath:~A category: ~A score:~A~%"
							   cnt
							   size
							   fp
							   (car rst)
							   (cdr rst))
						 (incf cnt)))))
			  ((string= (car argv) "help")
			   (print help-msg))
			  (t (error (format nil "Command Not Found (~A)" (car argv))))))
	(error (e)
	  (format *standard-output* "~&Error: ~A~%" e)
	  (uiop:quit -1))))
;;; vim: set ft=lisp lisp:
